apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-store-api-sa
  namespace: app-store-api # Le SA est dans le namespace de l'API
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: app-store-apps # Ce Role donne des droits DANS le namespace des apps
  name: app-installer-role
rules:
  - apiGroups: [ "", "apps", "extensions", "batch", "networking.k8s.io", "storage.k8s.io" ] # Groupes d'API courants
    resources: [ "*" ] # Toutes les ressources dans ces groupes
    verbs: [ "*" ]     # Toutes les actions
  - apiGroups: [ "helm.toolkit.fluxcd.io" ] # Si vous utilisez FluxCD Helm controller, sinon pas nécessaire
    resources: [ "helmreleases" ]
    verbs: [ "*" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-installer-rb
  namespace: app-store-apps # Lie le SA au Role DANS le namespace des apps
subjects:
  - kind: ServiceAccount
    name: app-store-api-sa
    namespace: app-store-api # Référence le SA du namespace de l'API
roleRef:
  kind: Role
  name: app-installer-role
  apiGroup: rbac.authorization.k8s.io
---
# Permissions pour que Helm puisse gérer ses propres métadonnées (secrets/configmaps de releases)
# Souvent, Helm stocke ses infos dans le namespace où il opère, ou dans kube-system.
# Pour l'API utilisant la librairie Go, Helm stocke les secrets de release dans le même namespace que celui où les charts sont déployés (app-store-apps)
# Donc le Role ci-dessus (app-installer-role) est suffisant si Helm est configuré pour cela.
# Si Helm devait opérer sur des secrets dans le namespace de l'API ou kube-system, un ClusterRole/RoleBinding serait nécessaire.
# Le code actuel utilise HELM_DRIVER=secret (par défaut) et le namespace 'app-store-apps' pour les opérations,
# donc les permissions dans 'app-store-apps' devraient suffire pour les secrets de Helm.

# Ajoutons des permissions pour lister les namespaces (nécessaire pour actionConfig.Init et potentiellement `kubectl create namespace`)
# et pour créer des namespaces (si on veut que l'API crée `app-store-apps` elle-même)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: app-store-api-clusterrole
rules:
  - apiGroups: [ "" ]
    resources: [ "namespaces", "nodes" ]
    verbs: [ "get", "list", "watch", "create" ] # create est pour `kubectl create namespace`
  - apiGroups: [ "metrics.k8s.io" ]
    resources: [ "pods", "nodes" ]
    verbs: [ "get", "list", "watch" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: app-store-api-clusterrolebinding
subjects:
  - kind: ServiceAccount
    name: app-store-api-sa
    namespace: app-store-api
roleRef:
  kind: ClusterRole
  name: app-store-api-clusterrole
  apiGroup: rbac.authorization.k8s.io